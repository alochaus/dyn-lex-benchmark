val IM = 139968
val IA = 3877
val IC = 29573

var seed = 42
val random = func (max) {
    set seed = ((seed * IA) + IC) % IM
    (max * seed) / IM
}

val concat = func (a, b) {
var result = a 
    var i = 0
    var limit = #b
    loop {
        break if i >= limit
        set result[#result] = b[i]
        set i = i + 1
    }

    result
}

val slice = func (string, start, stop) {
    var i = start
    var result = #[]
    loop {
        break if i == stop
        set result[#result] = string[i]
        set i = i + 1 
    }

    drop(result)
}

val WIDTH = 60

val print_fasta_header = func (id, desc) {
    println(">", id, desc)
}

val repeat_fasta = func (id, desc, alu, n) {
    print_fasta_header(id, desc)

    var alusize = #alu
    var aluwrap = concat(alu, alu)
    loop {
        break if #aluwrap >= (alusize + WIDTH)

        set aluwrap = concat(aluwrap, alu)
        println(aluwrap)
    }

    var lines = n // WIDTH
    var last_line = n % WIDTH
    var start = 0

    loop {
        break if lines <= -1

        var stop = start + WIDTH
        println(slice(aluwrap, start, stop))
        set start = stop % alusize
        set lines = lines - 1
    }

    if last_line > 0 {
        println(slice(aluwrap, start, start + last_line))
    } else { nil }
}

val linear_search = func (ps, p) {
    var i = 0
    var found = nil;

    loop {
        if ps[i] >= p {
            set found = i
        } else {
            nil
        }
        break if found /= nil
        set i = i + 1
    }
    found
}

val random_fasta = func (id, desc, frequencies, n) {
    print_fasta_header(id, desc)

    var nitems = #frequencies
    var letters = #[]
    var probs = #[]

    var total = 0.0
    var i = 0

    loop {
        break if i >= nitems
        var o = frequencies[i]
        var c = o[0]
        var p = o[1]
        set total = total + p
        set letters[i] = c
        set probs[i] = total
        set i = i + 1
    }

    set probs[nitems] = 1.0

    var N = n
    var col = 0
    loop {
        break if N == 0
        var ix = linear_search(probs, random(1.0))
        var c = letters[ix]
        print(c)
        set col = col + 1
        if col >= WIDTH {
            println("")
            set col = 0
        } else { nil }
        set N = N - 1
    }

    if col > 0 {
        println("")
    } else { nil }
}

var HUMAN_ALU =
    "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"

var IUB = [
    ["a", 0.27],
    ["c", 0.12],
    ["g", 0.12],
    ["t", 0.27],
    ["B", 0.02],
    ["D", 0.02],
    ["H", 0.02],
    ["K", 0.02],
    ["M", 0.02],
    ["N", 0.02],
    ["R", 0.02],
    ["S", 0.02],
    ["V", 0.02],
    ["W", 0.02],
    ["Y", 0.02]
]

var HOMO_SAPIENS = [
    ["a", 0.3029549426680],
    ["c", 0.1979883004921],
    ["g", 0.1975473066391],
    ["t", 0.3015094502008]
]

var main
set main = func (n) {
    var N = 100
    repeat_fasta("ONE", "Homo sapiens alu", HUMAN_ALU, N*2)
    random_fasta("TWO", "IUB ambiguity codes", IUB, N*3)
    random_fasta("THREE", "Homo sapiens frequency", HOMO_SAPIENS, N*5)
}

main()