val IM = 139968
val IA = 3877
val IC = 29573

val seed = 42
func random(max) {
    set seed = ((seed * IA) + IC) % IM
    (max * seed) / IM
}

val WIDTH = 60

var function print_fasta_header(id, desc) {
    println(">", id, desc)
}

var function repeat_fasta(id, desc, alu, n) {
    print_fasta_header(id, desc)

    var alusize = #alu

    ;;var aluwrap = alu .. alu
    ;;`strcat($alu.Dyn->Vector.buf, $alu.Dyn->Vector.buf);`
    ;;`$alu.Dyn->Vector.its = $alu.Dyn->Vector.its + $b.Dyn->Vector.its`
    while #aluwrap < alusize + WIDTH {
        aluwrap = aluwrap .. alu
    }

    var lines = n // WIDTH
    var last_line = n % WIDTH
    var start = 0

    loop {
        break if lines <= 0

        var stop = start + WIDTH
        io.write(string.sub(aluwrap, start+1, stop))
        io.write("\n")
        set start = stop % alusize
        set lines = lines - 1
    }

    if last_line > 0 {
        io.write(string.sub(aluwrap, start+1, start + last_line))
        io.write("\n")
    }
}

var function linear_search(ps, p) {
    var i = 1
    loop {
        break if i > #ps
        if ps[i] >= p {
            i
        } else {
            set i = i + 1
        }
    }
    1
}

var function random_fasta(id, desc, frequencies, n) {
    print_fasta_header(id, desc)

    var nitems = #frequencies
    var letters = {}
    var probs = {}

    loop i = 1 while i <= nitems {
        var o = frequencies[i]
        var c = o[1]
        var p = o[2]
        set total = total + p
        letters[i] = c
        probs[i] = total
        set i = i + 1
    }

    probs[nitems] = 1.0

    var col = 0
    loop {
        break if n <= 0

        var ix = linear_search(probs, random(1.0))
        var c = letters[ix]

        print(c)
        set col = col + 1
        if col >= WIDTH {
            println("")
            set col = 0
        }
        set n = n - 1
    }

    if col > 0 {
        println("")
    }
}

var HUMAN_ALU =
    "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"

var IUB = [
    ["a", 0.27],
    ["c", 0.12],
    ["g", 0.12],
    ["t", 0.27],
    ["B", 0.02],
    ["D", 0.02],
    ["H", 0.02],
    ["K", 0.02],
    ["M", 0.02],
    ["N", 0.02],
    ["R", 0.02],
    ["S", 0.02],
    ["V", 0.02],
    ["W", 0.02],
    ["Y", 0.02]
]

var HOMO_SAPIENS = [
    ["a", 0.3029549426680],
    ["c", 0.1979883004921],
    ["g", 0.1975473066391],
    ["t", 0.3015094502008]
]

var main
set main = func (N) {
    N = 100
    repeat_fasta("ONE", "Homo sapiens alu", HUMAN_ALU, N*2)
    random_fasta("TWO", "IUB ambiguity codes", IUB, N*3)
    random_fasta("THREE", "Homo sapiens frequency", HOMO_SAPIENS, N*5)
}
