1217,1218c1217,1218
<                         CEU_Block _ceu_block_1264 = (CEU_Block) { 1, 1, {.frame=&_ceu_frame_}, NULL };
<                         CEU_Block* ceu_block_1264 = &_ceu_block_1264; 
---
>                         CEU_Block _ceu_block_2027 = (CEU_Block) { 1, 1, {.frame=&_ceu_frame_}, NULL };
>                         CEU_Block* ceu_block_2027 = &_ceu_block_2027; 
1221c1221
<                             CEU_Value id__dot__dot__dot_ = ceu_tuple_create(ceu_block_1264, ceu_argc);
---
>                             CEU_Value id__dot__dot__dot_ = ceu_tuple_create(ceu_block_2027, ceu_argc);
1223c1223
<                                 CEU_Value vec = ceu_vector_from_c_string(ceu_block_1264, ceu_argv[i]);
---
>                                 CEU_Value vec = ceu_vector_from_c_string(ceu_block_2027, ceu_argv[i]);
1261c1261,1265
<                             CEU_Value id_i = (CEU_Value) { CEU_VALUE_NIL };
---
>                             CEU_Value id_bottomUpTree = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_itemCheck = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_stress = (CEU_Value) { CEU_VALUE_NIL };
1263c1267
<                             CEU_Value id_sum = (CEU_Value) { CEU_VALUE_NIL };
---
>                             CEU_Value id_main = (CEU_Value) { CEU_VALUE_NIL };
1375c1379
<                     ceu_block_1264,
---
>                     ceu_block_2027,
1387,1388c1391,1392
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
1504c1508
<                     ceu_block_1264,
---
>                     ceu_block_2027,
1516,1517c1520,1521
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
1780c1784
<                     ceu_block_1264,
---
>                     ceu_block_2027,
1792,1793c1796,1797
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
2190c2194
<                     ceu_block_1264,
---
>                     ceu_block_2027,
2202,2203c2206,2207
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
2466c2470
<                     ceu_block_1264,
---
>                     ceu_block_2027,
2478,2479c2482,2483
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
2742c2746
<                     ceu_block_1264,
---
>                     ceu_block_2027,
2754,2755c2758,2759
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
3018c3022
<                     ceu_block_1264,
---
>                     ceu_block_2027,
3030,3031c3034,3035
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
3294c3298
<                     ceu_block_1264,
---
>                     ceu_block_2027,
3306,3307c3310,3311
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
3570c3574
<                     ceu_block_1264,
---
>                     ceu_block_2027,
3582,3583c3586,3587
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
3866c3870
<                     ceu_block_1264,
---
>                     ceu_block_2027,
3878,3879c3882,3883
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
4162c4166
<                     ceu_block_1264,
---
>                     ceu_block_2027,
4174,4175c4178,4179
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
4458c4462
<                     ceu_block_1264,
---
>                     ceu_block_2027,
4470,4471c4474,4475
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
4754c4758
<                     ceu_block_1264,
---
>                     ceu_block_2027,
4766,4767c4770,4771
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
5257c5261
<                     ceu_block_1264,
---
>                     ceu_block_2027,
5272,5273c5276,5277
<                                 ceu_block_1264,
<                                 ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, (ceu_set_1002), 0, "set error"),
---
>                                 ceu_block_2027,
>                                 ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, (ceu_set_1002), 0, "set error"),
5652c5656
<                     ceu_block_1264,
---
>                     ceu_block_2027,
5664,5665c5668,5669
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
5835c5839
<                     ceu_block_1264,
---
>                     ceu_block_2027,
5847,5848c5851,5852
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
---
>                             ceu_block_2027,
>                             ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
5859c5863,5916
<                 ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });
---
>                 
>                 
>                     
>                     ceu_gc_inc(id_bottomUpTree);
>                     ceu_acc = id_bottomUpTree;
>                     
>                 
>                 { // SET | 
>                      // TYPE | 
>                     
>                  // PROTO | 
>                     CEU_Value ceu_proto_1236 (
>                         CEU_Frame* ceu_frame,
>                         int ceu_n,
>                         CEU_Value ceu_args[]
>                     ) {
>                         CEU_Value ceu_acc;        
>                         
>                         
>                             CEU_Value id_d;
>                             CEU_Block* _id_d_;
>                             
>                         
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_1235 = (CEU_Block) { ceu_frame->up_block->depth + 1, 1, {.frame=ceu_frame}, NULL };
>                         CEU_Block* ceu_block_1235 = &_ceu_block_1235; 
>                         
>                         
>                             { // func args
>                                 
>                                     if (0 < ceu_n) {
>                                         ceu_assert_pre(
>                                             ceu_block_1235,
>                                             ceu_hold_chk_set(&ceu_block_1235->dyns, ceu_block_1235->depth, CEU_HOLD_FLEET, ceu_args[0], 0, "argument error"),
>                                             "binarytrees.ceu : (lin 2, col 29)"
>                                         );
>                                         id_d = ceu_args[0];
>                                         ceu_gc_inc(id_d);
>                                     } else {
>                                         id_d = (CEU_Value) { CEU_VALUE_NIL };
>                                     }
>                                     
>                                 
>                             }
>                             
>                         
>                             CEU_Value id_depth = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                         
>                         
>                         // >>> block
>                         
>                 // DCL | 
>                 ceu_acc = id_d;
5861,5863c5918,5920
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
<                             "simple.ceu : (lin 1, col 1)"
---
>                             ceu_block_1235,
>                             ceu_hold_chk_set(&ceu_block_1235->dyns, ceu_block_1235->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 3, col 5)"
5867,5869c5924,6673
<                     id_i = ceu_acc;
<                     ceu_gc_inc(id_i);
<                     ceu_acc = id_i;
---
>                     id_depth = ceu_acc;
>                     ceu_gc_inc(id_depth);
>                     ceu_acc = id_depth;
>                     
>                 
>                 { // IF | 
>                     
>                 { // CALL | 
>                     ceu_acc = op_greater;
>                     CEU_Value ceu_closure_1186 = ceu_acc;
>                     if (ceu_closure_1186.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1235, "binarytrees.ceu : (lin 4, col 14)", err);
>                     }
>                     CEU_Frame ceu_frame_1186 = { &ceu_closure_1186.Dyn->Closure, ceu_block_1235 };
>                     
>                     CEU_Value ceu_args_1186[2];
>                     
>                     ceu_acc = id_depth;ceu_args_1186[0] = ceu_acc;
> ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=0} });ceu_args_1186[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1186.closure->proto (
>                         &ceu_frame_1186,
>                         2,
>                         ceu_args_1186
>                     );
>                     ceu_assert_pre(ceu_block_1235, ceu_acc, "binarytrees.ceu : (lin 4, col 14) : call error");
>                 } // CALL
>                 
>                     if (ceu_as_bool(ceu_acc)) {
>                         
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_1220 = (CEU_Block) { (ceu_block_1235->depth + 1), 0, {.block=ceu_block_1235}, NULL };
>                         CEU_Block* ceu_block_1220 = &_ceu_block_1220; 
>                         
>                         
>                         
>                         
>                         
>                         // >>> block
>                         
>                 { // SET | 
>                     
>                 { // CALL | 
>                     ceu_acc = op_minus;
>                     CEU_Value ceu_closure_1199 = ceu_acc;
>                     if (ceu_closure_1199.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1220, "binarytrees.ceu : (lin 5, col 27)", err);
>                     }
>                     CEU_Frame ceu_frame_1199 = { &ceu_closure_1199.Dyn->Closure, ceu_block_1220 };
>                     
>                     CEU_Value ceu_args_1199[2];
>                     
>                     ceu_acc = id_depth;ceu_args_1199[0] = ceu_acc;
> ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });ceu_args_1199[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1199.closure->proto (
>                         &ceu_frame_1199,
>                         2,
>                         ceu_args_1199
>                     );
>                     ceu_assert_pre(ceu_block_1220, ceu_acc, "binarytrees.ceu : (lin 5, col 27) : call error");
>                 } // CALL
>                 
>                     CEU_Value ceu_set_1200 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_1220,
>                                 ceu_hold_chk_set(&ceu_block_1235->dyns, ceu_block_1235->depth, CEU_HOLD_MUTAB, (ceu_set_1200), 0, "set error"),
>                                 "binarytrees.ceu : (lin 5, col 13)"
>                             );
>                             ceu_gc_inc((ceu_set_1200));
>                             ceu_gc_dec(id_depth, 1);
>                             id_depth = (ceu_set_1200);
>                         }
>                         
>                     ceu_acc = ceu_set_1200;
>                 }
>                 
>                 { // TUPLE | 
>                     CEU_Value ceu_tup_1217 = ceu_tuple_create(ceu_block_1220, 2);
>                     
>                 { // CALL | 
>                     ceu_acc = id_bottomUpTree;
>                     CEU_Value ceu_closure_1208 = ceu_acc;
>                     if (ceu_closure_1208.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1220, "binarytrees.ceu : (lin 7, col 13)", err);
>                     }
>                     CEU_Frame ceu_frame_1208 = { &ceu_closure_1208.Dyn->Closure, ceu_block_1220 };
>                     
>                     CEU_Value ceu_args_1208[1];
>                     
>                     ceu_acc = id_depth;ceu_args_1208[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1208.closure->proto (
>                         &ceu_frame_1208,
>                         1,
>                         ceu_args_1208
>                     );
>                     ceu_assert_pre(ceu_block_1220, ceu_acc, "binarytrees.ceu : (lin 7, col 13) : call error");
>                 } // CALL
>                 
>                         ceu_assert_pre(
>                             ceu_block_1220,
>                             ceu_tuple_set(&ceu_tup_1217.Dyn->Tuple, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 6, col 9)"
>                         );
>                         
>                 { // CALL | 
>                     ceu_acc = id_bottomUpTree;
>                     CEU_Value ceu_closure_1216 = ceu_acc;
>                     if (ceu_closure_1216.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1220, "binarytrees.ceu : (lin 8, col 13)", err);
>                     }
>                     CEU_Frame ceu_frame_1216 = { &ceu_closure_1216.Dyn->Closure, ceu_block_1220 };
>                     
>                     CEU_Value ceu_args_1216[1];
>                     
>                     ceu_acc = id_depth;ceu_args_1216[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1216.closure->proto (
>                         &ceu_frame_1216,
>                         1,
>                         ceu_args_1216
>                     );
>                     ceu_assert_pre(ceu_block_1220, ceu_acc, "binarytrees.ceu : (lin 8, col 13) : call error");
>                 } // CALL
>                 
>                         ceu_assert_pre(
>                             ceu_block_1220,
>                             ceu_tuple_set(&ceu_tup_1217.Dyn->Tuple, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 6, col 9)"
>                         );
>                         
>                     ceu_acc = ceu_tup_1217;
>                 }
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_1220, 
>                                 ceu_hold_chk_set(&ceu_block_1235->dyns, ceu_block_1235->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 4, col 18)"
>                             );
>                             
>                         
>                         
>                         ceu_block_free(ceu_block_1220);
>                     }
>                     
>                     } else {
>                         
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_1232 = (CEU_Block) { (ceu_block_1235->depth + 1), 0, {.block=ceu_block_1235}, NULL };
>                         CEU_Block* ceu_block_1232 = &_ceu_block_1232; 
>                         
>                         
>                         
>                         
>                         
>                         // >>> block
>                         
>                 { // TUPLE | 
>                     CEU_Value ceu_tup_1229 = ceu_tuple_create(ceu_block_1232, 2);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_NIL });
>                         ceu_assert_pre(
>                             ceu_block_1232,
>                             ceu_tuple_set(&ceu_tup_1229.Dyn->Tuple, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 11, col 9)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_NIL });
>                         ceu_assert_pre(
>                             ceu_block_1232,
>                             ceu_tuple_set(&ceu_tup_1229.Dyn->Tuple, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 11, col 9)"
>                         );
>                         
>                     ceu_acc = ceu_tup_1229;
>                 }
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_1232, 
>                                 ceu_hold_chk_set(&ceu_block_1235->dyns, ceu_block_1235->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 10, col 12)"
>                             );
>                             
>                         
>                         
>                         ceu_block_free(ceu_block_1232);
>                     }
>                     
>                     }
>                 }
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_1235, 
>                                 ceu_hold_chk_set(&ceu_frame->up_block->dyns, ceu_frame->up_block->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 2, col 29)"
>                             );
>                             
>                         
>                             if (id_depth.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_depth, (id_depth.Dyn->Any.hld_depth == ceu_block_1235->depth));
>                             }
>                         
>                         
>                             
>                                 if (id_d.type > CEU_VALUE_DYNAMIC) {
>                                     ceu_gc_dec(id_d, !(ceu_acc.type>CEU_VALUE_DYNAMIC && ceu_acc.Dyn==id_d.Dyn));
>                                 }
>                                 
>                         
>                         ceu_block_free(ceu_block_1235);
>                     }
>                     
>                         return ceu_acc;
>                     }
>                  // CLOSURE | 
>                 CEU_Value ceu_ret_1236 = ceu_closure_create (
>                     ceu_block_2027,
>                     CEU_HOLD_FLEET,
>                     NULL,
>                     ceu_proto_1236,
>                     0
>                 );
>                 ceu_acc = ceu_ret_1236;
>                 
>                 // UPVALS
>                 
>                 
>                     CEU_Value ceu_set_1237 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_2027,
>                                 ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, (ceu_set_1237), 0, "set error"),
>                                 "binarytrees.ceu : (lin 2, col 5)"
>                             );
>                             ceu_gc_inc((ceu_set_1237));
>                             ceu_gc_dec(id_bottomUpTree, 1);
>                             id_bottomUpTree = (ceu_set_1237);
>                         }
>                         
>                     ceu_acc = ceu_set_1237;
>                 }
>                 
>                 // DCL | 
>                 
>                 
>                     
>                     ceu_gc_inc(id_itemCheck);
>                     ceu_acc = id_itemCheck;
>                     
>                 
>                 { // SET | 
>                      // TYPE | 
>                     
>                  // PROTO | 
>                     CEU_Value ceu_proto_1304 (
>                         CEU_Frame* ceu_frame,
>                         int ceu_n,
>                         CEU_Value ceu_args[]
>                     ) {
>                         CEU_Value ceu_acc;        
>                         
>                         
>                             CEU_Value id_tree;
>                             CEU_Block* _id_tree_;
>                             
>                         
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_1303 = (CEU_Block) { ceu_frame->up_block->depth + 1, 1, {.frame=ceu_frame}, NULL };
>                         CEU_Block* ceu_block_1303 = &_ceu_block_1303; 
>                         
>                         
>                             { // func args
>                                 
>                                     if (0 < ceu_n) {
>                                         ceu_assert_pre(
>                                             ceu_block_1303,
>                                             ceu_hold_chk_set(&ceu_block_1303->dyns, ceu_block_1303->depth, CEU_HOLD_FLEET, ceu_args[0], 0, "argument error"),
>                                             "binarytrees.ceu : (lin 19, col 29)"
>                                         );
>                                         id_tree = ceu_args[0];
>                                         ceu_gc_inc(id_tree);
>                                     } else {
>                                         id_tree = (CEU_Value) { CEU_VALUE_NIL };
>                                     }
>                                     
>                                 
>                             }
>                             
>                         
>                         
>                         
>                         // >>> block
>                         
>                 { // IF | 
>                     
>                 { // INDEX | 
>                     // IDX
>                     
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=0} });
>                         CEU_Value ceu_idx_1257 = ceu_acc;
>                         
>                     // COL
>                     ceu_acc = id_tree;
>                     ceu_assert_pre(ceu_block_1303, ceu_col_check(ceu_acc, ceu_idx_1257), "binarytrees.ceu : (lin 20, col 8)");
>                 
>                         switch (ceu_acc.type) {
>                             case CEU_VALUE_TUPLE:
>                                 ceu_acc = ceu_acc.Dyn->Tuple.buf[(int) ceu_idx_1257.Number];
>                                 break;
>                             case CEU_VALUE_VECTOR:
>                                 ceu_acc = ceu_assert_pre(ceu_block_1303, ceu_vector_get(&ceu_acc.Dyn->Vector, ceu_idx_1257.Number), "binarytrees.ceu : (lin 20, col 8)");
>                                 break;
>                             case CEU_VALUE_DICT: {
>                                 CEU_Value ceu_dict = ceu_acc;
>                                 ceu_acc = ceu_dict_get(&ceu_dict.Dyn->Dict, ceu_idx_1257);
>                                 break;
>                             }
>                             default:
>                                 assert(0 && "bug found");
>                         }
>                     
>                 }
>                 
>                     if (ceu_as_bool(ceu_acc)) {
>                         
>                     CEU_Block* ceu_block_1294 = ceu_block_1303;
>                     // >>> block
>                     
>                 { // CALL | 
>                     ceu_acc = op_plus;
>                     CEU_Value ceu_closure_1292 = ceu_acc;
>                     if (ceu_closure_1292.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1294, "binarytrees.ceu : (lin 21, col 32)", err);
>                     }
>                     CEU_Frame ceu_frame_1292 = { &ceu_closure_1292.Dyn->Closure, ceu_block_1294 };
>                     
>                     CEU_Value ceu_args_1292[2];
>                     
>                     
>                 { // CALL | 
>                     ceu_acc = op_plus;
>                     CEU_Value ceu_closure_1276 = ceu_acc;
>                     if (ceu_closure_1276.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1294, "binarytrees.ceu : (lin 21, col 11)", err);
>                     }
>                     CEU_Frame ceu_frame_1276 = { &ceu_closure_1276.Dyn->Closure, ceu_block_1294 };
>                     
>                     CEU_Value ceu_args_1276[2];
>                     
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });ceu_args_1276[0] = ceu_acc;
> 
>                 { // CALL | 
>                     ceu_acc = id_itemCheck;
>                     CEU_Value ceu_closure_1273 = ceu_acc;
>                     if (ceu_closure_1273.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1294, "binarytrees.ceu : (lin 21, col 13)", err);
>                     }
>                     CEU_Frame ceu_frame_1273 = { &ceu_closure_1273.Dyn->Closure, ceu_block_1294 };
>                     
>                     CEU_Value ceu_args_1273[1];
>                     
>                     
>                 { // INDEX | 
>                     // IDX
>                     
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=0} });
>                         CEU_Value ceu_idx_1271 = ceu_acc;
>                         
>                     // COL
>                     ceu_acc = id_tree;
>                     ceu_assert_pre(ceu_block_1294, ceu_col_check(ceu_acc, ceu_idx_1271), "binarytrees.ceu : (lin 21, col 23)");
>                 
>                         switch (ceu_acc.type) {
>                             case CEU_VALUE_TUPLE:
>                                 ceu_acc = ceu_acc.Dyn->Tuple.buf[(int) ceu_idx_1271.Number];
>                                 break;
>                             case CEU_VALUE_VECTOR:
>                                 ceu_acc = ceu_assert_pre(ceu_block_1294, ceu_vector_get(&ceu_acc.Dyn->Vector, ceu_idx_1271.Number), "binarytrees.ceu : (lin 21, col 23)");
>                                 break;
>                             case CEU_VALUE_DICT: {
>                                 CEU_Value ceu_dict = ceu_acc;
>                                 ceu_acc = ceu_dict_get(&ceu_dict.Dyn->Dict, ceu_idx_1271);
>                                 break;
>                             }
>                             default:
>                                 assert(0 && "bug found");
>                         }
>                     
>                 }
>                 ceu_args_1273[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1273.closure->proto (
>                         &ceu_frame_1273,
>                         1,
>                         ceu_args_1273
>                     );
>                     ceu_assert_pre(ceu_block_1294, ceu_acc, "binarytrees.ceu : (lin 21, col 13) : call error");
>                 } // CALL
>                 ceu_args_1276[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1276.closure->proto (
>                         &ceu_frame_1276,
>                         2,
>                         ceu_args_1276
>                     );
>                     ceu_assert_pre(ceu_block_1294, ceu_acc, "binarytrees.ceu : (lin 21, col 11) : call error");
>                 } // CALL
>                 ceu_args_1292[0] = ceu_acc;
> 
>                 { // CALL | 
>                     ceu_acc = id_itemCheck;
>                     CEU_Value ceu_closure_1289 = ceu_acc;
>                     if (ceu_closure_1289.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1294, "binarytrees.ceu : (lin 21, col 34)", err);
>                     }
>                     CEU_Frame ceu_frame_1289 = { &ceu_closure_1289.Dyn->Closure, ceu_block_1294 };
>                     
>                     CEU_Value ceu_args_1289[1];
>                     
>                     
>                 { // INDEX | 
>                     // IDX
>                     
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });
>                         CEU_Value ceu_idx_1287 = ceu_acc;
>                         
>                     // COL
>                     ceu_acc = id_tree;
>                     ceu_assert_pre(ceu_block_1294, ceu_col_check(ceu_acc, ceu_idx_1287), "binarytrees.ceu : (lin 21, col 44)");
>                 
>                         switch (ceu_acc.type) {
>                             case CEU_VALUE_TUPLE:
>                                 ceu_acc = ceu_acc.Dyn->Tuple.buf[(int) ceu_idx_1287.Number];
>                                 break;
>                             case CEU_VALUE_VECTOR:
>                                 ceu_acc = ceu_assert_pre(ceu_block_1294, ceu_vector_get(&ceu_acc.Dyn->Vector, ceu_idx_1287.Number), "binarytrees.ceu : (lin 21, col 44)");
>                                 break;
>                             case CEU_VALUE_DICT: {
>                                 CEU_Value ceu_dict = ceu_acc;
>                                 ceu_acc = ceu_dict_get(&ceu_dict.Dyn->Dict, ceu_idx_1287);
>                                 break;
>                             }
>                             default:
>                                 assert(0 && "bug found");
>                         }
>                     
>                 }
>                 ceu_args_1289[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1289.closure->proto (
>                         &ceu_frame_1289,
>                         1,
>                         ceu_args_1289
>                     );
>                     ceu_assert_pre(ceu_block_1294, ceu_acc, "binarytrees.ceu : (lin 21, col 34) : call error");
>                 } // CALL
>                 ceu_args_1292[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1292.closure->proto (
>                         &ceu_frame_1292,
>                         2,
>                         ceu_args_1292
>                     );
>                     ceu_assert_pre(ceu_block_1294, ceu_acc, "binarytrees.ceu : (lin 21, col 32) : call error");
>                 } // CALL
>                 
>                     // <<< block
>                     
>                     } else {
>                         
>                     CEU_Block* ceu_block_1300 = ceu_block_1303;
>                     // >>> block
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });
>                     // <<< block
>                     
>                     }
>                 }
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_1303, 
>                                 ceu_hold_chk_set(&ceu_frame->up_block->dyns, ceu_frame->up_block->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 19, col 29)"
>                             );
>                             
>                         
>                         
>                             
>                                 if (id_tree.type > CEU_VALUE_DYNAMIC) {
>                                     ceu_gc_dec(id_tree, !(ceu_acc.type>CEU_VALUE_DYNAMIC && ceu_acc.Dyn==id_tree.Dyn));
>                                 }
>                                 
>                         
>                         ceu_block_free(ceu_block_1303);
>                     }
>                     
>                         return ceu_acc;
>                     }
>                  // CLOSURE | 
>                 CEU_Value ceu_ret_1304 = ceu_closure_create (
>                     ceu_block_2027,
>                     CEU_HOLD_FLEET,
>                     NULL,
>                     ceu_proto_1304,
>                     0
>                 );
>                 ceu_acc = ceu_ret_1304;
>                 
>                 // UPVALS
>                 
>                 
>                     CEU_Value ceu_set_1305 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_2027,
>                                 ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, (ceu_set_1305), 0, "set error"),
>                                 "binarytrees.ceu : (lin 19, col 5)"
>                             );
>                             ceu_gc_inc((ceu_set_1305));
>                             ceu_gc_dec(id_itemCheck, 1);
>                             id_itemCheck = (ceu_set_1305);
>                         }
>                         
>                     ceu_acc = ceu_set_1305;
>                 }
>                 
>                 // DCL | 
>                 
>                 
>                     
>                     ceu_gc_inc(id_stress);
>                     ceu_acc = id_stress;
>                     
>                 
>                 { // SET | 
>                      // TYPE | 
>                     
>                  // PROTO | 
>                     CEU_Value ceu_proto_1435 (
>                         CEU_Frame* ceu_frame,
>                         int ceu_n,
>                         CEU_Value ceu_args[]
>                     ) {
>                         CEU_Value ceu_acc;        
>                         
>                         
>                             CEU_Value id_mindepth;
>                             CEU_Block* _id_mindepth_;
>                             
>                             CEU_Value id_maxdepth;
>                             CEU_Block* _id_maxdepth_;
>                             
>                             CEU_Value id_depth;
>                             CEU_Block* _id_depth_;
>                             
>                         
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_1434 = (CEU_Block) { ceu_frame->up_block->depth + 1, 1, {.frame=ceu_frame}, NULL };
>                         CEU_Block* ceu_block_1434 = &_ceu_block_1434; 
>                         
>                         
>                             { // func args
>                                 
>                                     if (0 < ceu_n) {
>                                         ceu_assert_pre(
>                                             ceu_block_1434,
>                                             ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_FLEET, ceu_args[0], 0, "argument error"),
>                                             "binarytrees.ceu : (lin 29, col 47)"
>                                         );
>                                         id_mindepth = ceu_args[0];
>                                         ceu_gc_inc(id_mindepth);
>                                     } else {
>                                         id_mindepth = (CEU_Value) { CEU_VALUE_NIL };
>                                     }
>                                     
>                                     if (1 < ceu_n) {
>                                         ceu_assert_pre(
>                                             ceu_block_1434,
>                                             ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_FLEET, ceu_args[1], 0, "argument error"),
>                                             "binarytrees.ceu : (lin 29, col 47)"
>                                         );
>                                         id_maxdepth = ceu_args[1];
>                                         ceu_gc_inc(id_maxdepth);
>                                     } else {
>                                         id_maxdepth = (CEU_Value) { CEU_VALUE_NIL };
>                                     }
>                                     
>                                     if (2 < ceu_n) {
>                                         ceu_assert_pre(
>                                             ceu_block_1434,
>                                             ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_FLEET, ceu_args[2], 0, "argument error"),
>                                             "binarytrees.ceu : (lin 29, col 47)"
>                                         );
>                                         id_depth = ceu_args[2];
>                                         ceu_gc_inc(id_depth);
>                                     } else {
>                                         id_depth = (CEU_Value) { CEU_VALUE_NIL };
>                                     }
>                                     
>                                 
>                             }
>                             
>                         
>                             CEU_Value id_iterations = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_check = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_i = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                         
>                         
>                         // >>> block
>                         
>                 // DCL | 
>                 
>                 { // CALL | 
>                     ceu_acc = op_asterisk_asterisk;
>                     CEU_Value ceu_closure_1349 = ceu_acc;
>                     if (ceu_closure_1349.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1434, "binarytrees.ceu : (lin 30, col 24)", err);
>                     }
>                     CEU_Frame ceu_frame_1349 = { &ceu_closure_1349.Dyn->Closure, ceu_block_1434 };
>                     
>                     CEU_Value ceu_args_1349[2];
>                     
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=2} });ceu_args_1349[0] = ceu_acc;
> 
>                 { // CALL | 
>                     ceu_acc = op_plus;
>                     CEU_Value ceu_closure_1345 = ceu_acc;
>                     if (ceu_closure_1345.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1434, "binarytrees.ceu : (lin 30, col 46)", err);
>                     }
>                     CEU_Frame ceu_frame_1345 = { &ceu_closure_1345.Dyn->Closure, ceu_block_1434 };
>                     
>                     CEU_Value ceu_args_1345[2];
>                     
>                     
>                 { // CALL | 
>                     ceu_acc = op_minus;
>                     CEU_Value ceu_closure_1338 = ceu_acc;
>                     if (ceu_closure_1338.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1434, "binarytrees.ceu : (lin 30, col 37)", err);
>                     }
>                     CEU_Frame ceu_frame_1338 = { &ceu_closure_1338.Dyn->Closure, ceu_block_1434 };
>                     
>                     CEU_Value ceu_args_1338[2];
>                     
>                     ceu_acc = id_maxdepth;ceu_args_1338[0] = ceu_acc;
> ceu_acc = id_depth;ceu_args_1338[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1338.closure->proto (
>                         &ceu_frame_1338,
>                         2,
>                         ceu_args_1338
>                     );
>                     ceu_assert_pre(ceu_block_1434, ceu_acc, "binarytrees.ceu : (lin 30, col 37) : call error");
>                 } // CALL
>                 ceu_args_1345[0] = ceu_acc;
> ceu_acc = id_mindepth;ceu_args_1345[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1345.closure->proto (
>                         &ceu_frame_1345,
>                         2,
>                         ceu_args_1345
>                     );
>                     ceu_assert_pre(ceu_block_1434, ceu_acc, "binarytrees.ceu : (lin 30, col 46) : call error");
>                 } // CALL
>                 ceu_args_1349[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1349.closure->proto (
>                         &ceu_frame_1349,
>                         2,
>                         ceu_args_1349
>                     );
>                     ceu_assert_pre(ceu_block_1434, ceu_acc, "binarytrees.ceu : (lin 30, col 24) : call error");
>                 } // CALL
>                 
>                         ceu_assert_pre(
>                             ceu_block_1434,
>                             ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 30, col 5)"
>                         );
>                     
>                 
>                     id_iterations = ceu_acc;
>                     ceu_gc_inc(id_iterations);
>                     ceu_acc = id_iterations;
5875,5877c6679,6681
<                             ceu_block_1264,
<                             ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
<                             "simple.ceu : (lin 2, col 1)"
---
>                             ceu_block_1434,
>                             ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 32, col 5)"
5881,5883c6685,6687
<                     id_sum = ceu_acc;
<                     ceu_gc_inc(id_sum);
<                     ceu_acc = id_sum;
---
>                     id_check = ceu_acc;
>                     ceu_gc_inc(id_check);
>                     ceu_acc = id_check;
5886,5887c6690,6701
<                     CEU_Block* ceu_block_1215 = ceu_block_1264;
<                     // >>> block
---
>                 // DCL | 
>                 ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });
>                         ceu_assert_pre(
>                             ceu_block_1434,
>                             ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 33, col 5)"
>                         );
>                     
>                 
>                     id_i = ceu_acc;
>                     ceu_gc_inc(id_i);
>                     ceu_acc = id_i;
5888a6703,6715
>                 
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_1423 = (CEU_Block) { (ceu_block_1434->depth + 1), 0, {.block=ceu_block_1434}, NULL };
>                         CEU_Block* ceu_block_1423 = &_ceu_block_1423; 
>                         
>                         
>                         
>                             CEU_Value id_t = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                         
>                         
>                         // >>> block
>                         
5893,5895c6720,6722
<                     ceu_acc = op_equals_equals;
<                     CEU_Value ceu_closure_1184 = ceu_acc;
<                     if (ceu_closure_1184.type != CEU_VALUE_CLOSURE) {
---
>                     ceu_acc = op_greater;
>                     CEU_Value ceu_closure_1376 = ceu_acc;
>                     if (ceu_closure_1376.type != CEU_VALUE_CLOSURE) {
5897c6724
<                         ceu_ferror_pre(ceu_block_1215, "simple.ceu : (lin 4, col 17)", err);
---
>                         ceu_ferror_pre(ceu_block_1423, "binarytrees.ceu : (lin 35, col 21)", err);
5899c6726
<                     CEU_Frame ceu_frame_1184 = { &ceu_closure_1184.Dyn->Closure, ceu_block_1215 };
---
>                     CEU_Frame ceu_frame_1376 = { &ceu_closure_1376.Dyn->Closure, ceu_block_1423 };
5901c6728
<                     CEU_Value ceu_args_1184[2];
---
>                     CEU_Value ceu_args_1376[2];
5903,5904c6730,6731
<                     ceu_acc = id_i;ceu_args_1184[0] = ceu_acc;
< ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1000000} });ceu_args_1184[1] = ceu_acc;
---
>                     ceu_acc = id_i;ceu_args_1376[0] = ceu_acc;
> ceu_acc = id_iterations;ceu_args_1376[1] = ceu_acc;
5909,5910c6736,6737
<                     ceu_acc = ceu_frame_1184.closure->proto (
<                         &ceu_frame_1184,
---
>                     ceu_acc = ceu_frame_1376.closure->proto (
>                         &ceu_frame_1376,
5912c6739
<                         ceu_args_1184
---
>                         ceu_args_1376
5914c6741
<                     ceu_assert_pre(ceu_block_1215, ceu_acc, "simple.ceu : (lin 4, col 17) : call error");
---
>                     ceu_assert_pre(ceu_block_1423, ceu_acc, "binarytrees.ceu : (lin 35, col 21) : call error");
5921a6749,6786
>                 // DCL | 
>                 
>                 { // CALL | 
>                     ceu_acc = id_bottomUpTree;
>                     CEU_Value ceu_closure_1388 = ceu_acc;
>                     if (ceu_closure_1388.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1423, "binarytrees.ceu : (lin 37, col 17)", err);
>                     }
>                     CEU_Frame ceu_frame_1388 = { &ceu_closure_1388.Dyn->Closure, ceu_block_1423 };
>                     
>                     CEU_Value ceu_args_1388[1];
>                     
>                     ceu_acc = id_depth;ceu_args_1388[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1388.closure->proto (
>                         &ceu_frame_1388,
>                         1,
>                         ceu_args_1388
>                     );
>                     ceu_assert_pre(ceu_block_1423, ceu_acc, "binarytrees.ceu : (lin 37, col 17) : call error");
>                 } // CALL
>                 
>                         ceu_assert_pre(
>                             ceu_block_1423,
>                             ceu_hold_chk_set(&ceu_block_1423->dyns, ceu_block_1423->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 37, col 9)"
>                         );
>                     
>                 
>                     id_t = ceu_acc;
>                     ceu_gc_inc(id_t);
>                     ceu_acc = id_t;
>                     
>                 
5926,5927c6791,6805
<                     CEU_Value ceu_closure_1198 = ceu_acc;
<                     if (ceu_closure_1198.type != CEU_VALUE_CLOSURE) {
---
>                     CEU_Value ceu_closure_1406 = ceu_acc;
>                     if (ceu_closure_1406.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1423, "binarytrees.ceu : (lin 38, col 27)", err);
>                     }
>                     CEU_Frame ceu_frame_1406 = { &ceu_closure_1406.Dyn->Closure, ceu_block_1423 };
>                     
>                     CEU_Value ceu_args_1406[2];
>                     
>                     ceu_acc = id_check;ceu_args_1406[0] = ceu_acc;
> 
>                 { // CALL | 
>                     ceu_acc = id_itemCheck;
>                     CEU_Value ceu_closure_1403 = ceu_acc;
>                     if (ceu_closure_1403.type != CEU_VALUE_CLOSURE) {
5929c6807
<                         ceu_ferror_pre(ceu_block_1215, "simple.ceu : (lin 6, col 19)", err);
---
>                         ceu_ferror_pre(ceu_block_1423, "binarytrees.ceu : (lin 38, col 29)", err);
5931c6809
<                     CEU_Frame ceu_frame_1198 = { &ceu_closure_1198.Dyn->Closure, ceu_block_1215 };
---
>                     CEU_Frame ceu_frame_1403 = { &ceu_closure_1403.Dyn->Closure, ceu_block_1423 };
5933c6811
<                     CEU_Value ceu_args_1198[2];
---
>                     CEU_Value ceu_args_1403[1];
5935,5936c6813
<                     ceu_acc = id_sum;ceu_args_1198[0] = ceu_acc;
< ceu_acc = id_i;ceu_args_1198[1] = ceu_acc;
---
>                     ceu_acc = id_t;ceu_args_1403[0] = ceu_acc;
5941,5942c6818,6831
<                     ceu_acc = ceu_frame_1198.closure->proto (
<                         &ceu_frame_1198,
---
>                     ceu_acc = ceu_frame_1403.closure->proto (
>                         &ceu_frame_1403,
>                         1,
>                         ceu_args_1403
>                     );
>                     ceu_assert_pre(ceu_block_1423, ceu_acc, "binarytrees.ceu : (lin 38, col 29) : call error");
>                 } // CALL
>                 ceu_args_1406[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1406.closure->proto (
>                         &ceu_frame_1406,
5944c6833
<                         ceu_args_1198
---
>                         ceu_args_1406
5946c6835
<                     ceu_assert_pre(ceu_block_1215, ceu_acc, "simple.ceu : (lin 6, col 19) : call error");
---
>                     ceu_assert_pre(ceu_block_1423, ceu_acc, "binarytrees.ceu : (lin 38, col 27) : call error");
5949c6838
<                     CEU_Value ceu_set_1199 = ceu_acc;
---
>                     CEU_Value ceu_set_1407 = ceu_acc;
5953,5955c6842,6844
<                                 ceu_block_1215,
<                                 ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, (ceu_set_1199), 0, "set error"),
<                                 "simple.ceu : (lin 6, col 9)"
---
>                                 ceu_block_1423,
>                                 ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_MUTAB, (ceu_set_1407), 0, "set error"),
>                                 "binarytrees.ceu : (lin 38, col 13)"
5957,5959c6846,6848
<                             ceu_gc_inc((ceu_set_1199));
<                             ceu_gc_dec(id_sum, 1);
<                             id_sum = (ceu_set_1199);
---
>                             ceu_gc_inc((ceu_set_1407));
>                             ceu_gc_dec(id_check, 1);
>                             id_check = (ceu_set_1407);
5962c6851
<                     ceu_acc = ceu_set_1199;
---
>                     ceu_acc = ceu_set_1407;
5969,5970c6858,6859
<                     CEU_Value ceu_closure_1211 = ceu_acc;
<                     if (ceu_closure_1211.type != CEU_VALUE_CLOSURE) {
---
>                     CEU_Value ceu_closure_1419 = ceu_acc;
>                     if (ceu_closure_1419.type != CEU_VALUE_CLOSURE) {
5972c6861
<                         ceu_ferror_pre(ceu_block_1215, "simple.ceu : (lin 7, col 15)", err);
---
>                         ceu_ferror_pre(ceu_block_1423, "binarytrees.ceu : (lin 40, col 19)", err);
5974c6863
<                     CEU_Frame ceu_frame_1211 = { &ceu_closure_1211.Dyn->Closure, ceu_block_1215 };
---
>                     CEU_Frame ceu_frame_1419 = { &ceu_closure_1419.Dyn->Closure, ceu_block_1423 };
5976c6865
<                     CEU_Value ceu_args_1211[2];
---
>                     CEU_Value ceu_args_1419[2];
5978,5979c6867,6868
<                     ceu_acc = id_i;ceu_args_1211[0] = ceu_acc;
< ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });ceu_args_1211[1] = ceu_acc;
---
>                     ceu_acc = id_i;ceu_args_1419[0] = ceu_acc;
> ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });ceu_args_1419[1] = ceu_acc;
5984,5985c6873,6874
<                     ceu_acc = ceu_frame_1211.closure->proto (
<                         &ceu_frame_1211,
---
>                     ceu_acc = ceu_frame_1419.closure->proto (
>                         &ceu_frame_1419,
5987c6876
<                         ceu_args_1211
---
>                         ceu_args_1419
5989c6878
<                     ceu_assert_pre(ceu_block_1215, ceu_acc, "simple.ceu : (lin 7, col 15) : call error");
---
>                     ceu_assert_pre(ceu_block_1423, ceu_acc, "binarytrees.ceu : (lin 40, col 19) : call error");
5992c6881
<                     CEU_Value ceu_set_1212 = ceu_acc;
---
>                     CEU_Value ceu_set_1420 = ceu_acc;
5996,5998c6885,6887
<                                 ceu_block_1215,
<                                 ceu_hold_chk_set(&ceu_block_1264->dyns, ceu_block_1264->depth, CEU_HOLD_MUTAB, (ceu_set_1212), 0, "set error"),
<                                 "simple.ceu : (lin 7, col 9)"
---
>                                 ceu_block_1423,
>                                 ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_MUTAB, (ceu_set_1420), 0, "set error"),
>                                 "binarytrees.ceu : (lin 40, col 13)"
6000c6889
<                             ceu_gc_inc((ceu_set_1212));
---
>                             ceu_gc_inc((ceu_set_1420));
6002c6891,7178
<                             id_i = (ceu_set_1212);
---
>                             id_i = (ceu_set_1420);
>                         }
>                         
>                     ceu_acc = ceu_set_1420;
>                 }
>                 
>                     }
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_1423, 
>                                 ceu_hold_chk_set(&ceu_block_1434->dyns, ceu_block_1434->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 34, col 5)"
>                             );
>                             
>                         
>                             if (id_t.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_t, (id_t.Dyn->Any.hld_depth == ceu_block_1423->depth));
>                             }
>                         
>                         
>                         ceu_block_free(ceu_block_1423);
>                     }
>                     
>                 { // TUPLE | 
>                     CEU_Value ceu_tup_1431 = ceu_tuple_create(ceu_block_1434, 2);
>                     ceu_acc = id_iterations;
>                         ceu_assert_pre(
>                             ceu_block_1434,
>                             ceu_tuple_set(&ceu_tup_1431.Dyn->Tuple, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 43, col 5)"
>                         );
>                         ceu_acc = id_check;
>                         ceu_assert_pre(
>                             ceu_block_1434,
>                             ceu_tuple_set(&ceu_tup_1431.Dyn->Tuple, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 43, col 5)"
>                         );
>                         
>                     ceu_acc = ceu_tup_1431;
>                 }
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_1434, 
>                                 ceu_hold_chk_set(&ceu_frame->up_block->dyns, ceu_frame->up_block->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 29, col 47)"
>                             );
>                             
>                         
>                             if (id_iterations.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_iterations, (id_iterations.Dyn->Any.hld_depth == ceu_block_1434->depth));
>                             }
>                         
>                             if (id_check.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_check, (id_check.Dyn->Any.hld_depth == ceu_block_1434->depth));
>                             }
>                         
>                             if (id_i.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_i, (id_i.Dyn->Any.hld_depth == ceu_block_1434->depth));
>                             }
>                         
>                         
>                             
>                                 if (id_mindepth.type > CEU_VALUE_DYNAMIC) {
>                                     ceu_gc_dec(id_mindepth, !(ceu_acc.type>CEU_VALUE_DYNAMIC && ceu_acc.Dyn==id_mindepth.Dyn));
>                                 }
>                                 
>                                 if (id_maxdepth.type > CEU_VALUE_DYNAMIC) {
>                                     ceu_gc_dec(id_maxdepth, !(ceu_acc.type>CEU_VALUE_DYNAMIC && ceu_acc.Dyn==id_maxdepth.Dyn));
>                                 }
>                                 
>                                 if (id_depth.type > CEU_VALUE_DYNAMIC) {
>                                     ceu_gc_dec(id_depth, !(ceu_acc.type>CEU_VALUE_DYNAMIC && ceu_acc.Dyn==id_depth.Dyn));
>                                 }
>                                 
>                         
>                         ceu_block_free(ceu_block_1434);
>                     }
>                     
>                         return ceu_acc;
>                     }
>                  // CLOSURE | 
>                 CEU_Value ceu_ret_1435 = ceu_closure_create (
>                     ceu_block_2027,
>                     CEU_HOLD_FLEET,
>                     NULL,
>                     ceu_proto_1435,
>                     0
>                 );
>                 ceu_acc = ceu_ret_1435;
>                 
>                 // UPVALS
>                 
>                 
>                     CEU_Value ceu_set_1436 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_2027,
>                                 ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, (ceu_set_1436), 0, "set error"),
>                                 "binarytrees.ceu : (lin 29, col 5)"
>                             );
>                             ceu_gc_inc((ceu_set_1436));
>                             ceu_gc_dec(id_stress, 1);
>                             id_stress = (ceu_set_1436);
>                         }
>                         
>                     ceu_acc = ceu_set_1436;
>                 }
>                 
>                 // DCL | 
>                 
>                 
>                     
>                     ceu_gc_inc(id_main);
>                     ceu_acc = id_main;
>                     
>                 
>                 { // SET | 
>                      // TYPE | 
>                     
>                  // PROTO | 
>                     CEU_Value ceu_proto_2017 (
>                         CEU_Frame* ceu_frame,
>                         int ceu_n,
>                         CEU_Value ceu_args[]
>                     ) {
>                         CEU_Value ceu_acc;        
>                         
>                         
>                             CEU_Value id_n;
>                             CEU_Block* _id_n_;
>                             
>                         
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_2016 = (CEU_Block) { ceu_frame->up_block->depth + 1, 1, {.frame=ceu_frame}, NULL };
>                         CEU_Block* ceu_block_2016 = &_ceu_block_2016; 
>                         
>                         
>                             { // func args
>                                 
>                                     if (0 < ceu_n) {
>                                         ceu_assert_pre(
>                                             ceu_block_2016,
>                                             ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_FLEET, ceu_args[0], 0, "argument error"),
>                                             "binarytrees.ceu : (lin 50, col 21)"
>                                         );
>                                         id_n = ceu_args[0];
>                                         ceu_gc_inc(id_n);
>                                     } else {
>                                         id_n = (CEU_Value) { CEU_VALUE_NIL };
>                                     }
>                                     
>                                 
>                             }
>                             
>                         
>                             CEU_Value id_N = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_mindepth = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_maxdepth = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_stretchdepth = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_stretchtree = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_longlivedtree = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_depth = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                         
>                         
>                         // >>> block
>                         
>                 // DCL | 
>                 ceu_acc = id_n;
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 51, col 5)"
>                         );
>                     
>                 
>                     id_N = ceu_acc;
>                     ceu_gc_inc(id_N);
>                     ceu_acc = id_N;
>                     
>                 
>                 // DCL | 
>                 ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=4} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 53, col 5)"
>                         );
>                     
>                 
>                     id_mindepth = ceu_acc;
>                     ceu_gc_inc(id_mindepth);
>                     ceu_acc = id_mindepth;
>                     
>                 
>                 // DCL | 
>                 
>                 
>                     
>                     ceu_gc_inc(id_maxdepth);
>                     ceu_acc = id_maxdepth;
>                     
>                 
>                 { // IF | 
>                     
>                 { // CALL | 
>                     ceu_acc = op_less;
>                     CEU_Value ceu_closure_1480 = ceu_acc;
>                     if (ceu_closure_1480.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 56, col 23)", err);
>                     }
>                     CEU_Frame ceu_frame_1480 = { &ceu_closure_1480.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_1480[2];
>                     
>                     
>                 { // CALL | 
>                     ceu_acc = op_plus;
>                     CEU_Value ceu_closure_1473 = ceu_acc;
>                     if (ceu_closure_1473.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 56, col 18)", err);
>                     }
>                     CEU_Frame ceu_frame_1473 = { &ceu_closure_1473.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_1473[2];
>                     
>                     ceu_acc = id_mindepth;ceu_args_1473[0] = ceu_acc;
> ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=2} });ceu_args_1473[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1473.closure->proto (
>                         &ceu_frame_1473,
>                         2,
>                         ceu_args_1473
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 56, col 18) : call error");
>                 } // CALL
>                 ceu_args_1480[0] = ceu_acc;
> ceu_acc = id_N;ceu_args_1480[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1480.closure->proto (
>                         &ceu_frame_1480,
>                         2,
>                         ceu_args_1480
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 56, col 23) : call error");
>                 } // CALL
>                 
>                     if (ceu_as_bool(ceu_acc)) {
>                         
>                     CEU_Block* ceu_block_1490 = ceu_block_2016;
>                     // >>> block
>                     
>                 { // SET | 
>                     ceu_acc = id_N;
>                     CEU_Value ceu_set_1488 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_1490,
>                                 ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, (ceu_set_1488), 0, "set error"),
>                                 "binarytrees.ceu : (lin 57, col 13)"
>                             );
>                             ceu_gc_inc((ceu_set_1488));
>                             ceu_gc_dec(id_maxdepth, 1);
>                             id_maxdepth = (ceu_set_1488);
6005c7181
<                     ceu_acc = ceu_set_1212;
---
>                     ceu_acc = ceu_set_1488;
6007a7184,7198
>                     // <<< block
>                     
>                     } else {
>                         
>                     CEU_Block* ceu_block_1507 = ceu_block_2016;
>                     // >>> block
>                     
>                 { // SET | 
>                     
>                 { // CALL | 
>                     ceu_acc = op_plus;
>                     CEU_Value ceu_closure_1504 = ceu_acc;
>                     if (ceu_closure_1504.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1507, "binarytrees.ceu : (lin 59, col 33)", err);
6008a7200,7232
>                     CEU_Frame ceu_frame_1504 = { &ceu_closure_1504.Dyn->Closure, ceu_block_1507 };
>                     
>                     CEU_Value ceu_args_1504[2];
>                     
>                     ceu_acc = id_mindepth;ceu_args_1504[0] = ceu_acc;
> ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=2} });ceu_args_1504[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1504.closure->proto (
>                         &ceu_frame_1504,
>                         2,
>                         ceu_args_1504
>                     );
>                     ceu_assert_pre(ceu_block_1507, ceu_acc, "binarytrees.ceu : (lin 59, col 33) : call error");
>                 } // CALL
>                 
>                     CEU_Value ceu_set_1505 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_1507,
>                                 ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, (ceu_set_1505), 0, "set error"),
>                                 "binarytrees.ceu : (lin 59, col 13)"
>                             );
>                             ceu_gc_inc((ceu_set_1505));
>                             ceu_gc_dec(id_maxdepth, 1);
>                             id_maxdepth = (ceu_set_1505);
>                         }
>                         
>                     ceu_acc = ceu_set_1505;
>                 }
6011a7236,7238
>                     }
>                 }
>                 
6014,6015c7241,7242
<                     CEU_Value ceu_closure_1262 = ceu_acc;
<                     if (ceu_closure_1262.type != CEU_VALUE_CLOSURE) {
---
>                     CEU_Value ceu_closure_1599 = ceu_acc;
>                     if (ceu_closure_1599.type != CEU_VALUE_CLOSURE) {
6017c7244
<                         ceu_ferror_pre(ceu_block_1264, "simple.ceu : (lin 10, col 1)", err);
---
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 63, col 5)", err);
6019c7246
<                     CEU_Frame ceu_frame_1262 = { &ceu_closure_1262.Dyn->Closure, ceu_block_1264 };
---
>                     CEU_Frame ceu_frame_1599 = { &ceu_closure_1599.Dyn->Closure, ceu_block_2016 };
6021c7248
<                     CEU_Value ceu_args_1262[2];
---
>                     CEU_Value ceu_args_1599[6];
6025,6026c7252,7315
<                     CEU_Value ceu_vec_1256 = ceu_vector_create(ceu_block_1264);
<                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='T'} });
---
>                     CEU_Value ceu_vec_1521 = ceu_vector_create(ceu_block_2016);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='N'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1521.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=':'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1521.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1521.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 13)"
>                         );
>                         
>                     ceu_acc = ceu_vec_1521;
>                 }
>                 ceu_args_1599[0] = ceu_acc;
> ceu_acc = id_N;ceu_args_1599[1] = ceu_acc;
> 
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_1557 = ceu_vector_create(ceu_block_2016);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='m'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='i'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='n'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='d'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='p'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
6028,6030c7317,7319
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 0, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
6034,6036c7323,7369
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 1, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 7, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=':'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 8, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1557.Dyn->Vector, 9, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 23)"
>                         );
>                         
>                     ceu_acc = ceu_vec_1557;
>                 }
>                 ceu_args_1599[2] = ceu_acc;
> ceu_acc = id_mindepth;ceu_args_1599[3] = ceu_acc;
> 
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_1593 = ceu_vector_create(ceu_block_2016);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='m'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='a'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='x'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='d'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
6040,6042c7373,7399
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 2, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='p'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 7, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=':'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 8, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
6046,6048c7403,7405
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 3, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1593.Dyn->Vector, 9, ceu_acc),
>                             "binarytrees.ceu : (lin 63, col 47)"
6050c7407,7450
<                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='s'} });
---
>                         
>                     ceu_acc = ceu_vec_1593;
>                 }
>                 ceu_args_1599[4] = ceu_acc;
> ceu_acc = id_maxdepth;ceu_args_1599[5] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1599.closure->proto (
>                         &ceu_frame_1599,
>                         6,
>                         ceu_args_1599
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 63, col 5) : call error");
>                 } // CALL
>                 
>                 // DCL | 
>                 
>                 { // CALL | 
>                     ceu_acc = op_plus;
>                     CEU_Value ceu_closure_1610 = ceu_acc;
>                     if (ceu_closure_1610.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 65, col 33)", err);
>                     }
>                     CEU_Frame ceu_frame_1610 = { &ceu_closure_1610.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_1610[2];
>                     
>                     ceu_acc = id_maxdepth;ceu_args_1610[0] = ceu_acc;
> ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });ceu_args_1610[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1610.closure->proto (
>                         &ceu_frame_1610,
>                         2,
>                         ceu_args_1610
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 65, col 33) : call error");
>                 } // CALL
>                 
6052,6054c7452,7454
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 4, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 65, col 5)"
6056c7456,7533
<                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='u'} });
---
>                     
>                 
>                     id_stretchdepth = ceu_acc;
>                     ceu_gc_inc(id_stretchdepth);
>                     ceu_acc = id_stretchdepth;
>                     
>                 
>                 // DCL | 
>                 
>                 { // CALL | 
>                     ceu_acc = id_bottomUpTree;
>                     CEU_Value ceu_closure_1621 = ceu_acc;
>                     if (ceu_closure_1621.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 66, col 23)", err);
>                     }
>                     CEU_Frame ceu_frame_1621 = { &ceu_closure_1621.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_1621[1];
>                     
>                     ceu_acc = id_stretchdepth;ceu_args_1621[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1621.closure->proto (
>                         &ceu_frame_1621,
>                         1,
>                         ceu_args_1621
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 66, col 23) : call error");
>                 } // CALL
>                 
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 66, col 5)"
>                         );
>                     
>                 
>                     id_stretchtree = ceu_acc;
>                     ceu_gc_inc(id_stretchtree);
>                     ceu_acc = id_stretchtree;
>                     
>                 
>                 { // CALL | 
>                     ceu_acc = id_println;
>                     CEU_Value ceu_closure_1727 = ceu_acc;
>                     if (ceu_closure_1727.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 67, col 5)", err);
>                     }
>                     CEU_Frame ceu_frame_1727 = { &ceu_closure_1727.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_1727[4];
>                     
>                     
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_1689 = ceu_vector_create(ceu_block_2016);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='s'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='r'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
6058,6060c7535,7537
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 5, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
6062c7539,7551
<                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='m'} });
---
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='c'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
6064,6066c7553,7555
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 6, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
6070,6072c7559,7561
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 7, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 7, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
6074c7563,7984
<                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='i'} });
---
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 8, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='r'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 9, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 10, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 11, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 12, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='o'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 13, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='f'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 14, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 15, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='d'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 16, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 17, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='p'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 18, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 19, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1689.Dyn->Vector, 20, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 13)"
>                         );
>                         
>                     ceu_acc = ceu_vec_1689;
>                 }
>                 ceu_args_1727[0] = ceu_acc;
> ceu_acc = id_stretchdepth;ceu_args_1727[1] = ceu_acc;
> 
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_1716 = ceu_vector_create(ceu_block_2016);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='c'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1716.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 52)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1716.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 52)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1716.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 52)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='c'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1716.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 52)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='k'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1716.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 52)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=':'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1716.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 52)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1716.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 67, col 52)"
>                         );
>                         
>                     ceu_acc = ceu_vec_1716;
>                 }
>                 ceu_args_1727[2] = ceu_acc;
> 
>                 { // CALL | 
>                     ceu_acc = id_itemCheck;
>                     CEU_Value ceu_closure_1725 = ceu_acc;
>                     if (ceu_closure_1725.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 67, col 63)", err);
>                     }
>                     CEU_Frame ceu_frame_1725 = { &ceu_closure_1725.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_1725[1];
>                     
>                     ceu_acc = id_stretchtree;ceu_args_1725[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1725.closure->proto (
>                         &ceu_frame_1725,
>                         1,
>                         ceu_args_1725
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 67, col 63) : call error");
>                 } // CALL
>                 ceu_args_1727[3] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1727.closure->proto (
>                         &ceu_frame_1727,
>                         4,
>                         ceu_args_1727
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 67, col 5) : call error");
>                 } // CALL
>                 
>                 // DCL | 
>                 
>                 { // CALL | 
>                     ceu_acc = id_bottomUpTree;
>                     CEU_Value ceu_closure_1737 = ceu_acc;
>                     if (ceu_closure_1737.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 70, col 25)", err);
>                     }
>                     CEU_Frame ceu_frame_1737 = { &ceu_closure_1737.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_1737[1];
>                     
>                     ceu_acc = id_maxdepth;ceu_args_1737[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1737.closure->proto (
>                         &ceu_frame_1737,
>                         1,
>                         ceu_args_1737
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 70, col 25) : call error");
>                 } // CALL
>                 
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 70, col 5)"
>                         );
>                     
>                 
>                     id_longlivedtree = ceu_acc;
>                     ceu_gc_inc(id_longlivedtree);
>                     ceu_acc = id_longlivedtree;
>                     
>                 
>                 // DCL | 
>                 ceu_acc = id_mindepth;
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 72, col 5)"
>                         );
>                     
>                 
>                     id_depth = ceu_acc;
>                     ceu_gc_inc(id_depth);
>                     ceu_acc = id_depth;
>                     
>                 
>                     { // BLOCK | 
>                         CEU_Block _ceu_block_1899 = (CEU_Block) { (ceu_block_2016->depth + 1), 0, {.block=ceu_block_2016}, NULL };
>                         CEU_Block* ceu_block_1899 = &_ceu_block_1899; 
>                         
>                         
>                         
>                             CEU_Value id_r = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_iterations = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                             CEU_Value id_check = (CEU_Value) { CEU_VALUE_NIL };
>                         
>                         
>                         
>                         // >>> block
>                         
>                     while (1) { // LOOP | 
>                         
>                 
>                 { // CALL | 
>                     ceu_acc = op_greater;
>                     CEU_Value ceu_closure_1757 = ceu_acc;
>                     if (ceu_closure_1757.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1899, "binarytrees.ceu : (lin 75, col 25)", err);
>                     }
>                     CEU_Frame ceu_frame_1757 = { &ceu_closure_1757.Dyn->Closure, ceu_block_1899 };
>                     
>                     CEU_Value ceu_args_1757[2];
>                     
>                     ceu_acc = id_depth;ceu_args_1757[0] = ceu_acc;
> ceu_acc = id_maxdepth;ceu_args_1757[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1757.closure->proto (
>                         &ceu_frame_1757,
>                         2,
>                         ceu_args_1757
>                     );
>                     ceu_assert_pre(ceu_block_1899, ceu_acc, "binarytrees.ceu : (lin 75, col 25) : call error");
>                 } // CALL
>                 
>                 if (ceu_as_bool(ceu_acc)) {
>                     
>                     break;
>                 }
>             
>                 // DCL | 
>                 
>                 { // CALL | 
>                     ceu_acc = id_stress;
>                     CEU_Value ceu_closure_1775 = ceu_acc;
>                     if (ceu_closure_1775.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1899, "binarytrees.ceu : (lin 77, col 17)", err);
>                     }
>                     CEU_Frame ceu_frame_1775 = { &ceu_closure_1775.Dyn->Closure, ceu_block_1899 };
>                     
>                     CEU_Value ceu_args_1775[3];
>                     
>                     ceu_acc = id_mindepth;ceu_args_1775[0] = ceu_acc;
> ceu_acc = id_maxdepth;ceu_args_1775[1] = ceu_acc;
> ceu_acc = id_depth;ceu_args_1775[2] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1775.closure->proto (
>                         &ceu_frame_1775,
>                         3,
>                         ceu_args_1775
>                     );
>                     ceu_assert_pre(ceu_block_1899, ceu_acc, "binarytrees.ceu : (lin 77, col 17) : call error");
>                 } // CALL
>                 
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_hold_chk_set(&ceu_block_1899->dyns, ceu_block_1899->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 77, col 9)"
>                         );
>                     
>                 
>                     id_r = ceu_acc;
>                     ceu_gc_inc(id_r);
>                     ceu_acc = id_r;
>                     
>                 
>                 // DCL | 
>                 
>                 { // INDEX | 
>                     // IDX
>                     
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=0} });
>                         CEU_Value ceu_idx_1786 = ceu_acc;
>                         
>                     // COL
>                     ceu_acc = id_r;
>                     ceu_assert_pre(ceu_block_1899, ceu_col_check(ceu_acc, ceu_idx_1786), "binarytrees.ceu : (lin 78, col 26)");
>                 
>                         switch (ceu_acc.type) {
>                             case CEU_VALUE_TUPLE:
>                                 ceu_acc = ceu_acc.Dyn->Tuple.buf[(int) ceu_idx_1786.Number];
>                                 break;
>                             case CEU_VALUE_VECTOR:
>                                 ceu_acc = ceu_assert_pre(ceu_block_1899, ceu_vector_get(&ceu_acc.Dyn->Vector, ceu_idx_1786.Number), "binarytrees.ceu : (lin 78, col 26)");
>                                 break;
>                             case CEU_VALUE_DICT: {
>                                 CEU_Value ceu_dict = ceu_acc;
>                                 ceu_acc = ceu_dict_get(&ceu_dict.Dyn->Dict, ceu_idx_1786);
>                                 break;
>                             }
>                             default:
>                                 assert(0 && "bug found");
>                         }
>                     
>                 }
>                 
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_hold_chk_set(&ceu_block_1899->dyns, ceu_block_1899->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 78, col 9)"
>                         );
>                     
>                 
>                     id_iterations = ceu_acc;
>                     ceu_gc_inc(id_iterations);
>                     ceu_acc = id_iterations;
>                     
>                 
>                 // DCL | 
>                 
>                 { // INDEX | 
>                     // IDX
>                     
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=1} });
>                         CEU_Value ceu_idx_1797 = ceu_acc;
>                         
>                     // COL
>                     ceu_acc = id_r;
>                     ceu_assert_pre(ceu_block_1899, ceu_col_check(ceu_acc, ceu_idx_1797), "binarytrees.ceu : (lin 79, col 21)");
>                 
>                         switch (ceu_acc.type) {
>                             case CEU_VALUE_TUPLE:
>                                 ceu_acc = ceu_acc.Dyn->Tuple.buf[(int) ceu_idx_1797.Number];
>                                 break;
>                             case CEU_VALUE_VECTOR:
>                                 ceu_acc = ceu_assert_pre(ceu_block_1899, ceu_vector_get(&ceu_acc.Dyn->Vector, ceu_idx_1797.Number), "binarytrees.ceu : (lin 79, col 21)");
>                                 break;
>                             case CEU_VALUE_DICT: {
>                                 CEU_Value ceu_dict = ceu_acc;
>                                 ceu_acc = ceu_dict_get(&ceu_dict.Dyn->Dict, ceu_idx_1797);
>                                 break;
>                             }
>                             default:
>                                 assert(0 && "bug found");
>                         }
>                     
>                 }
>                 
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_hold_chk_set(&ceu_block_1899->dyns, ceu_block_1899->depth, CEU_HOLD_MUTAB, ceu_acc, 0, "declaration error"),
>                             "binarytrees.ceu : (lin 79, col 9)"
>                         );
>                     
>                 
>                     id_check = ceu_acc;
>                     ceu_gc_inc(id_check);
>                     ceu_acc = id_check;
>                     
>                 
>                 { // CALL | 
>                     ceu_acc = id_println;
>                     CEU_Value ceu_closure_1883 = ceu_acc;
>                     if (ceu_closure_1883.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1899, "binarytrees.ceu : (lin 81, col 9)", err);
>                     }
>                     CEU_Frame ceu_frame_1883 = { &ceu_closure_1883.Dyn->Closure, ceu_block_1899 };
>                     
>                     CEU_Value ceu_args_1883[5];
>                     
>                     ceu_acc = id_iterations;ceu_args_1883[0] = ceu_acc;
> 
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_1850 = ceu_vector_create(ceu_block_1899);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='r'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
6076,6078c7986,7994
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 8, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
6082,6084c7998,8098
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 9, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='o'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='f'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 7, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 8, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='d'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 9, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 10, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='p'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 11, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 12, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 13, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1850.Dyn->Vector, 14, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 29)"
>                         );
>                         
>                     ceu_acc = ceu_vec_1850;
>                 }
>                 ceu_args_1883[1] = ceu_acc;
> ceu_acc = id_depth;ceu_args_1883[2] = ceu_acc;
> 
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_1877 = ceu_vector_create(ceu_block_1899);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='c'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1877.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 55)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1877.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 55)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1877.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 55)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='c'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1877.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 55)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='k'} });
>                         ceu_assert_pre(
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1877.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 55)"
6088,6090c8102,8104
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 10, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1877.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 55)"
6094,6096c8108,8110
<                             ceu_block_1264,
<                             ceu_vector_set(&ceu_vec_1256.Dyn->Vector, 11, ceu_acc),
<                             "simple.ceu : (lin 10, col 9)"
---
>                             ceu_block_1899,
>                             ceu_vector_set(&ceu_vec_1877.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 81, col 55)"
6099c8113
<                     ceu_acc = ceu_vec_1256;
---
>                     ceu_acc = ceu_vec_1877;
6101,6102c8115,8116
<                 ceu_args_1262[0] = ceu_acc;
< ceu_acc = id_sum;ceu_args_1262[1] = ceu_acc;
---
>                 ceu_args_1883[3] = ceu_acc;
> ceu_acc = id_check;ceu_args_1883[4] = ceu_acc;
6107,6108c8121,8149
<                     ceu_acc = ceu_frame_1262.closure->proto (
<                         &ceu_frame_1262,
---
>                     ceu_acc = ceu_frame_1883.closure->proto (
>                         &ceu_frame_1883,
>                         5,
>                         ceu_args_1883
>                     );
>                     ceu_assert_pre(ceu_block_1899, ceu_acc, "binarytrees.ceu : (lin 81, col 9) : call error");
>                 } // CALL
>                 
>                 { // SET | 
>                     
>                 { // CALL | 
>                     ceu_acc = op_plus;
>                     CEU_Value ceu_closure_1895 = ceu_acc;
>                     if (ceu_closure_1895.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_1899, "binarytrees.ceu : (lin 83, col 27)", err);
>                     }
>                     CEU_Frame ceu_frame_1895 = { &ceu_closure_1895.Dyn->Closure, ceu_block_1899 };
>                     
>                     CEU_Value ceu_args_1895[2];
>                     
>                     ceu_acc = id_depth;ceu_args_1895[0] = ceu_acc;
> ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=2} });ceu_args_1895[1] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_1895.closure->proto (
>                         &ceu_frame_1895,
6110c8151
<                         ceu_args_1262
---
>                         ceu_args_1895
6112c8153,8551
<                     ceu_assert_pre(ceu_block_1264, ceu_acc, "simple.ceu : (lin 10, col 1) : call error");
---
>                     ceu_assert_pre(ceu_block_1899, ceu_acc, "binarytrees.ceu : (lin 83, col 27) : call error");
>                 } // CALL
>                 
>                     CEU_Value ceu_set_1896 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_1899,
>                                 ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_MUTAB, (ceu_set_1896), 0, "set error"),
>                                 "binarytrees.ceu : (lin 83, col 13)"
>                             );
>                             ceu_gc_inc((ceu_set_1896));
>                             ceu_gc_dec(id_depth, 1);
>                             id_depth = (ceu_set_1896);
>                         }
>                         
>                     ceu_acc = ceu_set_1896;
>                 }
>                 
>                     }
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_1899, 
>                                 ceu_hold_chk_set(&ceu_block_2016->dyns, ceu_block_2016->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 74, col 5)"
>                             );
>                             
>                         
>                             if (id_r.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_r, (id_r.Dyn->Any.hld_depth == ceu_block_1899->depth));
>                             }
>                         
>                             if (id_iterations.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_iterations, (id_iterations.Dyn->Any.hld_depth == ceu_block_1899->depth));
>                             }
>                         
>                             if (id_check.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_check, (id_check.Dyn->Any.hld_depth == ceu_block_1899->depth));
>                             }
>                         
>                         
>                         ceu_block_free(ceu_block_1899);
>                     }
>                     
>                 { // CALL | 
>                     ceu_acc = id_println;
>                     CEU_Value ceu_closure_2014 = ceu_acc;
>                     if (ceu_closure_2014.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 86, col 5)", err);
>                     }
>                     CEU_Frame ceu_frame_2014 = { &ceu_closure_2014.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_2014[4];
>                     
>                     
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_1976 = ceu_vector_create(ceu_block_2016);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='l'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='o'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='n'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='g'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='l'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='i'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='v'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 7, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 8, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='d'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 9, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 10, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 11, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='r'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 12, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 13, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 14, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 15, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='o'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 16, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='f'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 17, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 18, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='d'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 19, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 20, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='p'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 21, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='t'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 22, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_1976.Dyn->Vector, 23, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 13)"
>                         );
>                         
>                     ceu_acc = ceu_vec_1976;
>                 }
>                 ceu_args_2014[0] = ceu_acc;
> ceu_acc = id_maxdepth;ceu_args_2014[1] = ceu_acc;
> 
>                 { // VECTOR | 
>                     CEU_Value ceu_vec_2003 = ceu_vector_create(ceu_block_2016);
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='c'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_2003.Dyn->Vector, 0, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 51)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='h'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_2003.Dyn->Vector, 1, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 51)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='e'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_2003.Dyn->Vector, 2, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 51)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='c'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_2003.Dyn->Vector, 3, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 51)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char='k'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_2003.Dyn->Vector, 4, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 51)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=':'} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_2003.Dyn->Vector, 5, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 51)"
>                         );
>                         ceu_acc = ((CEU_Value) { CEU_VALUE_CHAR, {.Char=' '} });
>                         ceu_assert_pre(
>                             ceu_block_2016,
>                             ceu_vector_set(&ceu_vec_2003.Dyn->Vector, 6, ceu_acc),
>                             "binarytrees.ceu : (lin 86, col 51)"
>                         );
>                         
>                     ceu_acc = ceu_vec_2003;
>                 }
>                 ceu_args_2014[2] = ceu_acc;
> 
>                 { // CALL | 
>                     ceu_acc = id_itemCheck;
>                     CEU_Value ceu_closure_2012 = ceu_acc;
>                     if (ceu_closure_2012.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2016, "binarytrees.ceu : (lin 86, col 62)", err);
>                     }
>                     CEU_Frame ceu_frame_2012 = { &ceu_closure_2012.Dyn->Closure, ceu_block_2016 };
>                     
>                     CEU_Value ceu_args_2012[1];
>                     
>                     ceu_acc = id_longlivedtree;ceu_args_2012[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_2012.closure->proto (
>                         &ceu_frame_2012,
>                         1,
>                         ceu_args_2012
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 86, col 62) : call error");
>                 } // CALL
>                 ceu_args_2014[3] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_2014.closure->proto (
>                         &ceu_frame_2014,
>                         4,
>                         ceu_args_2014
>                     );
>                     ceu_assert_pre(ceu_block_2016, ceu_acc, "binarytrees.ceu : (lin 86, col 5) : call error");
>                 } // CALL
>                 
>                         // <<< block
>                         
>                         
>                             // move up dynamic ceu_acc (return or error)
>                             ceu_assert_pre(
>                                 ceu_block_2016, 
>                                 ceu_hold_chk_set(&ceu_frame->up_block->dyns, ceu_frame->up_block->depth, CEU_HOLD_FLEET, ceu_acc, 0, "block escape error"),
>                                 "binarytrees.ceu : (lin 50, col 21)"
>                             );
>                             
>                         
>                             if (id_N.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_N, (id_N.Dyn->Any.hld_depth == ceu_block_2016->depth));
>                             }
>                         
>                             if (id_mindepth.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_mindepth, (id_mindepth.Dyn->Any.hld_depth == ceu_block_2016->depth));
>                             }
>                         
>                             if (id_maxdepth.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_maxdepth, (id_maxdepth.Dyn->Any.hld_depth == ceu_block_2016->depth));
>                             }
>                         
>                             if (id_stretchdepth.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_stretchdepth, (id_stretchdepth.Dyn->Any.hld_depth == ceu_block_2016->depth));
>                             }
>                         
>                             if (id_stretchtree.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_stretchtree, (id_stretchtree.Dyn->Any.hld_depth == ceu_block_2016->depth));
>                             }
>                         
>                             if (id_longlivedtree.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_longlivedtree, (id_longlivedtree.Dyn->Any.hld_depth == ceu_block_2016->depth));
>                             }
>                         
>                             if (id_depth.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_depth, (id_depth.Dyn->Any.hld_depth == ceu_block_2016->depth));
>                             }
>                         
>                         
>                             
>                                 if (id_n.type > CEU_VALUE_DYNAMIC) {
>                                     ceu_gc_dec(id_n, !(ceu_acc.type>CEU_VALUE_DYNAMIC && ceu_acc.Dyn==id_n.Dyn));
>                                 }
>                                 
>                         
>                         ceu_block_free(ceu_block_2016);
>                     }
>                     
>                         return ceu_acc;
>                     }
>                  // CLOSURE | 
>                 CEU_Value ceu_ret_2017 = ceu_closure_create (
>                     ceu_block_2027,
>                     CEU_HOLD_FLEET,
>                     NULL,
>                     ceu_proto_2017,
>                     0
>                 );
>                 ceu_acc = ceu_ret_2017;
>                 
>                 // UPVALS
>                 
>                 
>                     CEU_Value ceu_set_2018 = ceu_acc;
>                     
>                         { // ACC - SET
>                             ceu_assert_pre(
>                                 ceu_block_2027,
>                                 ceu_hold_chk_set(&ceu_block_2027->dyns, ceu_block_2027->depth, CEU_HOLD_MUTAB, (ceu_set_2018), 0, "set error"),
>                                 "binarytrees.ceu : (lin 50, col 5)"
>                             );
>                             ceu_gc_inc((ceu_set_2018));
>                             ceu_gc_dec(id_main, 1);
>                             id_main = (ceu_set_2018);
>                         }
>                         
>                     ceu_acc = ceu_set_2018;
>                 }
>                 
>                 { // CALL | 
>                     ceu_acc = id_main;
>                     CEU_Value ceu_closure_2025 = ceu_acc;
>                     if (ceu_closure_2025.type != CEU_VALUE_CLOSURE) {
>                         CEU_Value err = { CEU_VALUE_ERROR, {.Error="call error : expected function"} };
>                         ceu_ferror_pre(ceu_block_2027, "binarytrees.ceu : (lin 89, col 1)", err);
>                     }
>                     CEU_Frame ceu_frame_2025 = { &ceu_closure_2025.Dyn->Closure, ceu_block_2027 };
>                     
>                     CEU_Value ceu_args_2025[1];
>                     
>                     ceu_acc = ((CEU_Value) { CEU_VALUE_NUMBER, {.Number=12} });ceu_args_2025[0] = ceu_acc;
> 
>                     
>                     
> 
>                     ceu_acc = ceu_frame_2025.closure->proto (
>                         &ceu_frame_2025,
>                         1,
>                         ceu_args_2025
>                     );
>                     ceu_assert_pre(ceu_block_2027, ceu_acc, "binarytrees.ceu : (lin 89, col 1) : call error");
6120c8559
<                                 ceu_gc_dec(op_ampersand_ampersand, (op_ampersand_ampersand.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_ampersand_ampersand, (op_ampersand_ampersand.Dyn->Any.hld_depth == ceu_block_2027->depth));
6124c8563
<                                 ceu_gc_dec(op_bar_bar, (op_bar_bar.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_bar_bar, (op_bar_bar.Dyn->Any.hld_depth == ceu_block_2027->depth));
6128c8567
<                                 ceu_gc_dec(op_plus, (op_plus.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_plus, (op_plus.Dyn->Any.hld_depth == ceu_block_2027->depth));
6132c8571
<                                 ceu_gc_dec(op_minus, (op_minus.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_minus, (op_minus.Dyn->Any.hld_depth == ceu_block_2027->depth));
6136c8575
<                                 ceu_gc_dec(op_asterisk, (op_asterisk.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_asterisk, (op_asterisk.Dyn->Any.hld_depth == ceu_block_2027->depth));
6140c8579
<                                 ceu_gc_dec(op_asterisk_asterisk, (op_asterisk_asterisk.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_asterisk_asterisk, (op_asterisk_asterisk.Dyn->Any.hld_depth == ceu_block_2027->depth));
6144c8583
<                                 ceu_gc_dec(op_slash, (op_slash.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_slash, (op_slash.Dyn->Any.hld_depth == ceu_block_2027->depth));
6148c8587
<                                 ceu_gc_dec(op_slash_slash, (op_slash_slash.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_slash_slash, (op_slash_slash.Dyn->Any.hld_depth == ceu_block_2027->depth));
6152c8591
<                                 ceu_gc_dec(op_null, (op_null.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_null, (op_null.Dyn->Any.hld_depth == ceu_block_2027->depth));
6156c8595
<                                 ceu_gc_dec(op_greater_equals, (op_greater_equals.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_greater_equals, (op_greater_equals.Dyn->Any.hld_depth == ceu_block_2027->depth));
6160c8599
<                                 ceu_gc_dec(op_greater, (op_greater.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_greater, (op_greater.Dyn->Any.hld_depth == ceu_block_2027->depth));
6164c8603
<                                 ceu_gc_dec(op_less_equals, (op_less_equals.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_less_equals, (op_less_equals.Dyn->Any.hld_depth == ceu_block_2027->depth));
6168c8607
<                                 ceu_gc_dec(op_less, (op_less.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(op_less, (op_less.Dyn->Any.hld_depth == ceu_block_2027->depth));
6172c8611
<                                 ceu_gc_dec(id_to_dash_string, (id_to_dash_string.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(id_to_dash_string, (id_to_dash_string.Dyn->Any.hld_depth == ceu_block_2027->depth));
6176c8615
<                                 ceu_gc_dec(id_to_dash_number, (id_to_dash_number.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(id_to_dash_number, (id_to_dash_number.Dyn->Any.hld_depth == ceu_block_2027->depth));
6180c8619
<                                 ceu_gc_dec(id_to_dash_tag, (id_to_dash_tag.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                                 ceu_gc_dec(id_to_dash_tag, (id_to_dash_tag.Dyn->Any.hld_depth == ceu_block_2027->depth));
6183,6184c8622,8631
<                             if (id_i.type > CEU_VALUE_DYNAMIC) {
<                                 ceu_gc_dec(id_i, (id_i.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                             if (id_bottomUpTree.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_bottomUpTree, (id_bottomUpTree.Dyn->Any.hld_depth == ceu_block_2027->depth));
>                             }
>                         
>                             if (id_itemCheck.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_itemCheck, (id_itemCheck.Dyn->Any.hld_depth == ceu_block_2027->depth));
>                             }
>                         
>                             if (id_stress.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_stress, (id_stress.Dyn->Any.hld_depth == ceu_block_2027->depth));
6187,6188c8634,8635
<                             if (id_sum.type > CEU_VALUE_DYNAMIC) {
<                                 ceu_gc_dec(id_sum, (id_sum.Dyn->Any.hld_depth == ceu_block_1264->depth));
---
>                             if (id_main.type > CEU_VALUE_DYNAMIC) {
>                                 ceu_gc_dec(id_main, (id_main.Dyn->Any.hld_depth == ceu_block_2027->depth));
6192c8639
<                         ceu_block_free(ceu_block_1264);
---
>                         ceu_block_free(ceu_block_2027);
