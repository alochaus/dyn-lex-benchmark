var pi = 3.141592653589793
var SOLAR_MASS = 4 * pi * pi
var DAYS_PER_YEAR = 365.24

var new_body
set new_body = func (x, y, z, vx, vy, vz, mass) {
    @[
        (:x, x),
        (:y, y),
        (:z, z),
        (:vx, vx),
        (:vy, vy),
        (:vz, vz),
        (:mass, mass),
    ]
}

var advance
set advance = func (nbodies, bodies, dt) {
    var i = 0
    loop {
        break if i >= nbodies
        var j = i + 1
        loop {
            break if j >= nbodies

            var dx = bodies[i][:x] - bodies[j][:x]
            var dy = bodies[i][:y] - bodies[j][:y]
            var dz = bodies[i][:z] - bodies[j][:z]

            var distance = ((dx*dx) + (dy*dy) + (dz*dz))**(1/2)
            var mag = dt / (distance * distance * distance)

            set bodies[i][:vx] = bodies[i][:vx] - (dx * bodies[j][:mass] * mag)
            set bodies[i][:vy] = bodies[i][:vy] - (dy * bodies[j][:mass] * mag)
            set bodies[i][:vz] = bodies[i][:vz] - (dz * bodies[j][:mass] * mag)

            set bodies[j][:vx] = bodies[j][:vx] + (dx * bodies[i][:mass] * mag)
            set bodies[j][:vy] = bodies[j][:vy] + (dy * bodies[i][:mass] * mag)
            set bodies[j][:vz] = bodies[j][:vz] + (dz * bodies[i][:mass] * mag)
            set j = j + 1
        }
        set i = i + 1
    }     

    var k = 0
    loop {
        break if k >= nbodies

        set bodies[k][:x] = bodies[k][:x] + (dt * bodies[k][:vx])
        set bodies[k][:y] = bodies[k][:y] + (dt * bodies[k][:vy])
        set bodies[k][:z] = bodies[k][:z] + (dt * bodies[k][:vz])

        set k = k + 1
    }
}

var energy
set energy = func (nbodies, bodies) {
    var e = 0.0
    var i = 0
    loop {
        break if i >= nbodies
        set e = e + (0.5 * bodies[i][:mass] * ((bodies[i][:vx] * bodies[i][:vx]) + (bodies[i][:vy] * bodies[i][:vy]) + (bodies[i][:vz] * bodies[i][:vz])))
        var j = i + 1
        loop {
            break if j >= nbodies
            var dx = bodies[i][:x] - bodies[j][:x]
            var dy = bodies[i][:y] - bodies[j][:y]
            var dz = bodies[i][:z] - bodies[j][:z]
            var distance = ((dx * dx) + (dy * dy) + (dz * dz))**(1/2)
            set e = e - ((bodies[i][:mass] * bodies[j][:mass]) / distance)
            set j = j + 1
        }
        set i = i + 1
    }
    e
}

var offset_momentum
set offset_momentum = func (nbodies, bodies) {
    var px = 0.0
    var py = 0.0
    var pz = 0.0
    var i = 0
    loop {
        break if i >= nbodies
        set px = px + (bodies[i][:vx] * bodies[i][:mass])
        set py = py + (bodies[i][:vy] * bodies[i][:mass])
        set pz = pz + (bodies[i][:vz] * bodies[i][:mass])
        set i = i + 1
    }
    set bodies[0][:vx] = -px / SOLAR_MASS
    set bodies[0][:vy] = -py / SOLAR_MASS
    set bodies[0][:vz] = -pz / SOLAR_MASS
}

var NBODIES = 5

var bodies = #[
    new_body(
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    SOLAR_MASS),
    new_body(
    4.84143144246472090,
   -1.16032004402742839,
   -0.103622044471123109,
    0.00166007664274403694 * DAYS_PER_YEAR,
    0.00769901118419740425 * DAYS_PER_YEAR,
   -0.0000690460016972063023 * DAYS_PER_YEAR,
    0.000954791938424326609 * SOLAR_MASS ),
    new_body(
    8.34336671824457987,
    4.12479856412430479,
   -0.403523417114321381,
   -0.00276742510726862411 * DAYS_PER_YEAR,
    0.00499852801234917238 * DAYS_PER_YEAR,
    0.0000230417297573763929 * DAYS_PER_YEAR,
    0.000285885980666130812 * SOLAR_MASS ),
    new_body(
    12.8943695621391310,
   -15.1111514016986312,
   -0.223307578892655734,
    0.00296460137564761618 * DAYS_PER_YEAR,
    0.00237847173959480950 * DAYS_PER_YEAR,
   -0.0000296589568540237556 * DAYS_PER_YEAR,
    0.0000436624404335156298 * SOLAR_MASS ),



    new_body(
        15.3796971148509165,
       -25.9193146099879641,
        0.179258772950371181,
        0.00268067772490389322 * DAYS_PER_YEAR,
        0.00162824170038242295 * DAYS_PER_YEAR,
       -0.0000951592254519715870 * DAYS_PER_YEAR,
        0.0000515138902046611451 * SOLAR_MASS ),
]

var main
set main = func (n) {
    offset_momentum(NBODIES, bodies)
    println(energy(NBODIES, bodies))

    var i = 1
    loop {
        break if i > n
        advance(NBODIES, bodies, 0.01)
        set i = i + 1
    }

    println(energy(NBODIES, bodies))
}

main(1000)
