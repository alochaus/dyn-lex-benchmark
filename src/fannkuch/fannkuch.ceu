val {{>>}} = func (a, b) {
    `:number ((int) $a.Number >> (int) $b.Number)`
}

var max
set max = func (a, b) {
    if a > b {
        a
    } else {
        b
    }
}

var fannkuchredux
set fannkuchredux = func (n) {
    var perm
    var perm1
    var count
    var maxFlipsCount = 0
    var permCount = 0
    var checksum = 0

    set perm = #[]
    set perm1 = #[]
    set count = #[]

    var i = 1
    loop {
        break if (i > n)
        set perm[#perm] = 999
        set perm1[#perm1] = 999
        set count[#count] = 999
        set i = i + 1
    }

    set i = 0
    loop {
        break if (i == n)
        set perm1[i] = i
        set i = i + 1
    }

    var r = n

    var retVal = nil

    loop {

        loop {
            break if (r == 1)
            set count[r - 1] = r
            set r = r - 1
        }
        println(r, count)
        set i = 0
        loop {
            break if not (i == n)
            set perm[i] = perm1[i]
            set i = i + 1
        }
        println("perm", perm, "n", n, "i", i)

        var flipsCount = 0

        loop {
            var k = perm[0]
            break if k == 0

            var k2 = (k + 1) >> 1
            set i = 0

            loop {
                break if (i >= k2)
                var temp = perm[i]
                println(i, k, k2, perm)
                set perm[i] = perm[k - i]
                set perm[k - i] = temp
                set i = i + 1
                
            }
            set flipsCount = flipsCount + 1
        }

        
        set maxFlipsCount = max(maxFlipsCount, flipsCount)
        if (permCount % 2) == 0 {
            set checksum = checksum + flipsCount
        } else {
            set checksum = checksum - flipsCount
        }

        println("flipsCount", flipsCount, "permcount", permCount, "checksum", checksum, "max", maxFlipsCount)
        
        set retVal = nil
        loop {
            println("i", i, "r", r, "n", n, "r==n", r==n)
            if r == n {
                set retVal = maxFlipsCount
            } else {
                nil
            }
            break if retVal /= nil

            var perm0 = perm1[0]
            set i = 0
            loop {
                break if i >= r
                
                var j = i + 1
                set perm1[i] = perm1[j]
                set i = j
            }
            set perm1[r] = perm0
            set count[r] = count[r] - 1
            break if (count[r] > 0)
            set r = r + 1
        }
        println("z", retVal)
        break if retVal /= nil
        println("x")
        set permCount = permCount + 1
    }
    if retVal /= nil {
        retVal
    } else { nil }
}

var main
set main = func () {
    var n = 5
    println("Pfannkuchen(", n, ") = ", fannkuchredux(n))
}

main(5)